{"version":3,"sources":["main.js","dbhelper.js","restaurant_info.js","sw.js"],"names":["restaurants","neighborhoods","cuisines","DBHelper","callback","xhr","XMLHttpRequest","open","DATABASE_URL","onload","status","JSON","parse","responseText","error","send","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","map","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","concat","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","markers","registerServiceWorker","navigator","serviceWorker","register","then","console","log","catch","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","querySelector","focus","self","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","option","createElement","innerHTML","value","append","fillCuisinesHTML","window","initMap","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","createRestaurantHTML","addMarkersToMap","href","li","picture","createRestaurantImages","nameLink","address","more","image","className","src","imageUrlForRestaurant","setAttribute","marker","mapMarkerForRestaurant","addListener","location","push","fetchRestaurantFromURL","fillBreadcrumb","getParameterByName","fetchRestaurantById","fillRestaurantHTML","container","insertBefore","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","day","appendChild","time","reviews","noReviews","review","createReviewHTML","date","rating","comments","breadcrumb","replace","RegExp","exec","decodeURIComponent","_idb","_interopRequireDefault","require","contentCache","staticCacheName","imagesCacheName","allCaches","waitUntil","caches","cache","addAll","keys","cacheNames","Promise","all","cacheName","startsWith","includes","delete","requestUrl","URL","request","origin","pathname","respondWith","serveImage","match","response","fetch","storageUrl","networkFetch","networkResponse","put","clone"],"mappings":"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","file":"all.min.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nvar map;\r\nvar markers = [];\r\n\r\n/** \r\n * Register service worker(s)\r\n */\r\nconst registerServiceWorker = () => {\r\n  if (!navigator.serviceWorker) return;\r\n    navigator.serviceWorker.register('/js/sw.js')\r\n    .then(() => {\r\n      console.log('Service worker registered.');\r\n    })\r\n    .catch(() => {\r\n      console.log('Service worker did NOT register.');\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  registerServiceWorker();\r\n  document.querySelector('nav h1').focus();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const href = DBHelper.urlForRestaurant(restaurant);\r\n  const li = document.createElement('li');\r\n  const picture = createRestaurantImages(restaurant);\r\n  li.append(picture);\r\n\r\n  const name = document.createElement('h2');\r\n  const nameLink = document.createElement('a');\r\n  nameLink.href = href;\r\n  name.innerHTML = restaurant.name;\r\n  nameLink.append(name);\r\n  li.append(nameLink);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = href;\r\n  li.append(more);\r\n\r\n  return li;\r\n};\r\n/** \r\n * Create restaurant image(s).\r\n */\r\nconst createRestaurantImages = (restaurant) => {\r\n   /* default image; the largest */\r\n   const image = document.createElement('img');\r\n   image.className = 'restaurant-img';\r\n   image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n   image.setAttribute('alt', restaurant.name);\r\n  /* When the viewport permits a grid of several items \r\n    placed horizontally, use the *smaller* image\r\n  */\r\n  const picture = document.createElement('picture');\r\n  picture.innerHTML = `\r\n    <source media=\"(min-width: 585px)\" srcset=\"src/img/${restaurant.id}-thumb.jpg\">\r\n    <source media=\"(max-width: 584px\") srcset=\"src/img/${restaurant.id}-small.jpg\">\r\n  `;\r\n  picture.append(image);\r\n  return picture;\r\n};\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    return `http://localhost:${port}/src/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`src/img/${restaurant.photograph}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL';\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant);\n    });\n  }\n};\n/** \n * Create restaurant image(s).\n */\nconst createRestaurantImages = (restaurant) => {\n   /* default image; the largest */\n   const image = document.createElement('img');\n   image.id = 'restaurant-img';\n   image.src = DBHelper.imageUrlForRestaurant(restaurant);\n   image.setAttribute('alt', restaurant.name);\n\n  const picture = document.createElement('picture');\n  picture.innerHTML = `\n    <source media=\"(max-width: 500px)\" srcset=\"src/img/${restaurant.id}-thumb.jpg\">\n    <source media=\"(min-width: 501px) and (max-width: 600px\") srcset=\"src/img/${restaurant.id}-small.jpg\">\n  `;\n  picture.append(image);\n  return picture;\n};\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const container = document.getElementById('restaurant-container');\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const picture = createRestaurantImages(restaurant);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  container.insertBefore(picture, cuisine);\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  li.setAttribute('role', 'listitem');\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n\n/**\n * Register service worker(s)\n */\n// const registerServiceWorker = () => {\n//   if (!navigator.serviceWorker) return;\n//     navigator.serviceWorker.register('/js/sw.js')\n//     .then(() => {\n//       console.log('Service worker registered.');\n//     })\n//     .catch(() => {\n//       console.log('Service worker did NOT register.');\n//     });\n// };\n\nregisterServiceWorker();","import idb from 'idb';\n\nvar contentCache = [\n  '/',\n  '../index.html',\n  '../restaurant.html',\n  './main.js',\n  './restaurant_info.js',\n  './dbhelper.js',\n  '../favicon.ico',\n  '../favicon-16x16.png',\n  './css/styles.css',\n  './css/normalize.css',\n  '../data/restaurants.json'\n];\nvar staticCacheName = 'stage-1-restaurants';\nvar imagesCacheName = 'stage-1-content-images';\nvar allCaches = [\n  staticCacheName,\n  imagesCacheName\n];\n\n// open or create cache for static assets\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(staticCacheName).then(cache => {\n      return cache.addAll(contentCache);\n    })\n  );\n});\n\n// Filtering for the appropriate caches,\n// checking whether they're already extant\nself.addEventListener('activate', event => {\n  caches.keys().then(cacheNames => {\n    return Promise.all(\n      cacheNames.filter(cacheName => {\n        return cacheName.startsWith('stage-1-') &&\n          !allCaches.includes(cacheName);\n      }).map(cacheName => {\n        return caches.delete(cacheName);\n      })\n    );\n  })\n});\n\n// response with cached elements. Image \n// requests are intercepted and handled differently.\nself.addEventListener('fetch', event => {\n  var requestUrl = new URL(event.request.url);\n  if (requestUrl.origin === location.origin) {\n    if (requestUrl.pathname.startsWith('/img/')) {\n      event.respondWith(serveImage(event.request));\n      return;\n    }\n  }\n\n  event.respondWith(\n    caches.match(event.request).then(response => {\n      return response || fetch(event.request);\n    })\n  );\n});\n\n// Use caching to respond to image requests.\n// If the image's pathname is stored, return it\n// from cache. Otherwise, request the pathname from the\n// network, and store a clone of it in the cache, and \n// proceed with the original request.\nconst serveImage = request => {\n  let storageUrl = request.url.replace(/\\.jpg$/, '');\n\n  return caches.open(imagesCacheName).then(cache => {\n    return cache.match(storageUrl).then(response => {\n      let networkFetch = fetch(request).then(networkResponse => {\n        cache.put(storageUrl, networkResponse.clone());\n        return networkResponse;\n      });\n      return response || networkFetch;\n    });\n  });\n};"]}